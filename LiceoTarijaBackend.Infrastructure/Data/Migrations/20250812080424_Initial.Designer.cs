// <auto-generated />
using System;
using LiceoTarijaBackend.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LiceoTarijaBackend.Infrastructure.Data.Migrations
{
    [DbContext(typeof(LiceoTarijaDbContext))]
    [Migration("20250812080424_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LiceoTarijaBackend.Domain.Entities.Apoderado", b =>
                {
                    b.Property<int>("IdApoderado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdApoderado"));

                    b.Property<int>("DomicilioIdDomicilio")
                        .HasColumnType("integer");

                    b.Property<int>("IdDomicilio")
                        .HasColumnType("integer");

                    b.Property<int>("IdPersona")
                        .HasColumnType("integer");

                    b.Property<string>("Parentesco")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PersonaIdPersona")
                        .HasColumnType("integer");

                    b.HasKey("IdApoderado");

                    b.HasIndex("DomicilioIdDomicilio");

                    b.HasIndex("PersonaIdPersona");

                    b.ToTable("Apoderados");
                });

            modelBuilder.Entity("LiceoTarijaBackend.Domain.Entities.ApoderadoEstudiante", b =>
                {
                    b.Property<int>("IdApoderado")
                        .HasColumnType("integer");

                    b.Property<int>("IdEstudiante")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("FechaDesde")
                        .HasColumnType("date");

                    b.Property<int>("ApoderadoIdApoderado")
                        .HasColumnType("integer");

                    b.Property<int>("EstudianteIdEstudiante")
                        .HasColumnType("integer");

                    b.Property<DateOnly?>("FechaHasta")
                        .HasColumnType("date");

                    b.Property<bool?>("Titular")
                        .HasColumnType("boolean");

                    b.HasKey("IdApoderado", "IdEstudiante", "FechaDesde");

                    b.HasIndex("ApoderadoIdApoderado");

                    b.HasIndex("EstudianteIdEstudiante");

                    b.ToTable("ApoderadosEstudiantes");
                });

            modelBuilder.Entity("LiceoTarijaBackend.Domain.Entities.Area", b =>
                {
                    b.Property<int>("IdArea")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdArea"));

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdArea");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("LiceoTarijaBackend.Domain.Entities.AsignacionHoraria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AreaIdArea")
                        .HasColumnType("integer");

                    b.Property<int>("BloqueIdBloque")
                        .HasColumnType("integer");

                    b.Property<int>("CursoGestionIdCursoGestion")
                        .HasColumnType("integer");

                    b.Property<string>("DiaSemana")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("FechaDesde")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("FechaHasta")
                        .HasColumnType("date");

                    b.Property<int>("IdArea")
                        .HasColumnType("integer");

                    b.Property<int>("IdBloque")
                        .HasColumnType("integer");

                    b.Property<int>("IdCursoGestion")
                        .HasColumnType("integer");

                    b.Property<int>("IdProfesor")
                        .HasColumnType("integer");

                    b.Property<int>("ProfesorIdProfesor")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AreaIdArea");

                    b.HasIndex("BloqueIdBloque");

                    b.HasIndex("CursoGestionIdCursoGestion");

                    b.HasIndex("ProfesorIdProfesor");

                    b.ToTable("AsignacionesHorarias");
                });

            modelBuilder.Entity("LiceoTarijaBackend.Domain.Entities.Asistencia", b =>
                {
                    b.Property<int>("IdAsistencia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdAsistencia"));

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("Fecha")
                        .HasColumnType("date");

                    b.Property<int>("GestionEstudianteIdGestionEstudiante")
                        .HasColumnType("integer");

                    b.Property<int>("IdGestionEstudiante")
                        .HasColumnType("integer");

                    b.Property<string>("TipoAsistencia")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdAsistencia");

                    b.HasIndex("GestionEstudianteIdGestionEstudiante");

                    b.ToTable("Asistencias");
                });

            modelBuilder.Entity("LiceoTarijaBackend.Domain.Entities.Auditoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Columna")
                        .HasColumnType("text");

                    b.Property<string>("Entidad")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EntidadId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaCambio")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Observacion")
                        .HasColumnType("text");

                    b.Property<string>("Operacion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("integer");

                    b.Property<string>("ValorAnterior")
                        .HasColumnType("text");

                    b.Property<string>("ValorNuevo")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Auditorias");
                });

            modelBuilder.Entity("LiceoTarijaBackend.Domain.Entities.BloqueHorario", b =>
                {
                    b.Property<int>("IdBloque")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdBloque"));

                    b.Property<int>("Bloque")
                        .HasColumnType("integer");

                    b.Property<int>("GestionIdGestion")
                        .HasColumnType("integer");

                    b.Property<TimeOnly>("HoraFin")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly>("HoraInicio")
                        .HasColumnType("time without time zone");

                    b.Property<int>("IdGestion")
                        .HasColumnType("integer");

                    b.HasKey("IdBloque");

                    b.HasIndex("GestionIdGestion");

                    b.ToTable("BloquesHorarios");
                });

            modelBuilder.Entity("LiceoTarijaBackend.Domain.Entities.CalificacionesExcepcion", b =>
                {
                    b.Property<int>("IdExcepcion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdExcepcion"));

                    b.Property<DateTime>("FechaDesde")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaHasta")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("IdVentana")
                        .HasColumnType("integer");

                    b.Property<string>("Motivo")
                        .HasColumnType("text");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer");

                    b.Property<int>("VentanaIdVentana")
                        .HasColumnType("integer");

                    b.HasKey("IdExcepcion");

                    b.HasIndex("UsuarioId");

                    b.HasIndex("VentanaIdVentana");

                    b.ToTable("CalificacionesExcepciones");
                });

            modelBuilder.Entity("LiceoTarijaBackend.Domain.Entities.CalificacionesVentana", b =>
                {
                    b.Property<int>("IdVentana")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdVentana"));

                    b.Property<DateTime?>("AbiertoEn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AbiertoPorUsuarioId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CerradoEn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CerradoPorUsuarioId")
                        .HasColumnType("integer");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GestionIdGestion")
                        .HasColumnType("integer");

                    b.Property<int>("IdGestion")
                        .HasColumnType("integer");

                    b.Property<int>("IdPeriodo")
                        .HasColumnType("integer");

                    b.Property<int>("PeriodoIdPeriodo")
                        .HasColumnType("integer");

                    b.HasKey("IdVentana");

                    b.HasIndex("AbiertoPorUsuarioId");

                    b.HasIndex("CerradoPorUsuarioId");

                    b.HasIndex("GestionIdGestion");

                    b.HasIndex("PeriodoIdPeriodo");

                    b.ToTable("CalificacionesVentanas");
                });

            modelBuilder.Entity("LiceoTarijaBackend.Domain.Entities.Curso", b =>
                {
                    b.Property<int>("IdCurso")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdCurso"));

                    b.Property<string>("Grado")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nivel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Paralelo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdCurso");

                    b.ToTable("Cursos");
                });

            modelBuilder.Entity("LiceoTarijaBackend.Domain.Entities.CursoArea", b =>
                {
                    b.Property<int>("IdCursoArea")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdCursoArea"));

                    b.Property<int>("AreaIdArea")
                        .HasColumnType("integer");

                    b.Property<int>("CursoGestionIdCursoGestion")
                        .HasColumnType("integer");

                    b.Property<int>("IdArea")
                        .HasColumnType("integer");

                    b.Property<int>("IdCursoGestion")
                        .HasColumnType("integer");

                    b.HasKey("IdCursoArea");

                    b.HasIndex("AreaIdArea");

                    b.HasIndex("CursoGestionIdCursoGestion");

                    b.ToTable("CursosAreas");
                });

            modelBuilder.Entity("LiceoTarijaBackend.Domain.Entities.CursoAreaProfesor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AreaIdArea")
                        .HasColumnType("integer");

                    b.Property<int>("CursoGestionIdCursoGestion")
                        .HasColumnType("integer");

                    b.Property<int>("IdArea")
                        .HasColumnType("integer");

                    b.Property<int>("IdCursoGestion")
                        .HasColumnType("integer");

                    b.Property<int>("IdProfesor")
                        .HasColumnType("integer");

                    b.Property<int>("ProfesorIdProfesor")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AreaIdArea");

                    b.HasIndex("CursoGestionIdCursoGestion");

                    b.HasIndex("ProfesorIdProfesor");

                    b.ToTable("CursosAreasProfesores");
                });

            modelBuilder.Entity("LiceoTarijaBackend.Domain.Entities.CursoGestion", b =>
                {
                    b.Property<int>("IdCursoGestion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdCursoGestion"));

                    b.Property<int>("CursoIdCurso")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("FechaDesde")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("FechaHasta")
                        .HasColumnType("date");

                    b.Property<int>("GestionIdGestion")
                        .HasColumnType("integer");

                    b.Property<int>("IdCurso")
                        .HasColumnType("integer");

                    b.Property<int>("IdGestion")
                        .HasColumnType("integer");

                    b.HasKey("IdCursoGestion");

                    b.HasIndex("CursoIdCurso");

                    b.HasIndex("GestionIdGestion");

                    b.ToTable("CursosGestion");
                });

            modelBuilder.Entity("LiceoTarijaBackend.Domain.Entities.Dimension", b =>
                {
                    b.Property<int>("IdDimension")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdDimension"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Peso")
                        .HasColumnType("integer");

                    b.HasKey("IdDimension");

                    b.ToTable("Dimensiones");
                });

            modelBuilder.Entity("LiceoTarijaBackend.Domain.Entities.Domicilio", b =>
                {
                    b.Property<int>("IdDomicilio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdDomicilio"));

                    b.Property<string>("Calle")
                        .HasColumnType("text");

                    b.Property<string>("Numero")
                        .HasColumnType("text");

                    b.Property<string>("TelefonoFijo")
                        .HasColumnType("text");

                    b.Property<string>("Zona")
                        .HasColumnType("text");

                    b.HasKey("IdDomicilio");

                    b.ToTable("Domicilios");
                });

            modelBuilder.Entity("LiceoTarijaBackend.Domain.Entities.Estudiante", b =>
                {
                    b.Property<int>("IdEstudiante")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdEstudiante"));

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly?>("FechaNacimiento")
                        .HasColumnType("date");

                    b.Property<int>("IdPersona")
                        .HasColumnType("integer");

                    b.Property<int>("PersonaIdPersona")
                        .HasColumnType("integer");

                    b.Property<string>("Rude")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Sexo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdEstudiante");

                    b.HasIndex("PersonaIdPersona");

                    b.ToTable("Estudiantes");
                });

            modelBuilder.Entity("LiceoTarijaBackend.Domain.Entities.Evaluacion", b =>
                {
                    b.Property<int>("IdEvaluacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdEvaluacion"));

                    b.Property<int>("AreaIdArea")
                        .HasColumnType("integer");

                    b.Property<int?>("CreadoPorUsuarioId")
                        .HasColumnType("integer");

                    b.Property<int>("CursoGestionIdCursoGestion")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DimensionIdDimension")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("Fecha")
                        .HasColumnType("date");

                    b.Property<int>("IdArea")
                        .HasColumnType("integer");

                    b.Property<int>("IdCursoGestion")
                        .HasColumnType("integer");

                    b.Property<int>("IdDimension")
                        .HasColumnType("integer");

                    b.Property<int>("IdPeriodo")
                        .HasColumnType("integer");

                    b.Property<int>("IdProfesor")
                        .HasColumnType("integer");

                    b.Property<int>("PeriodoIdPeriodo")
                        .HasColumnType("integer");

                    b.Property<int>("ProfesorIdProfesor")
                        .HasColumnType("integer");

                    b.Property<string>("TipoEvaluacion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdEvaluacion");

                    b.HasIndex("AreaIdArea");

                    b.HasIndex("CreadoPorUsuarioId");

                    b.HasIndex("CursoGestionIdCursoGestion");

                    b.HasIndex("DimensionIdDimension");

                    b.HasIndex("PeriodoIdPeriodo");

                    b.HasIndex("ProfesorIdProfesor");

                    b.ToTable("Evaluaciones");
                });

            modelBuilder.Entity("LiceoTarijaBackend.Domain.Entities.Gestion", b =>
                {
                    b.Property<int>("IdGestion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdGestion"));

                    b.Property<int>("Anio")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("FechaFin")
                        .HasColumnType("date");

                    b.Property<DateOnly>("FechaInicio")
                        .HasColumnType("date");

                    b.HasKey("IdGestion");

                    b.ToTable("Gestiones");
                });

            modelBuilder.Entity("LiceoTarijaBackend.Domain.Entities.GestionEstudiante", b =>
                {
                    b.Property<int>("IdGestionEstudiante")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdGestionEstudiante"));

                    b.Property<int>("CursoGestionIdCursoGestion")
                        .HasColumnType("integer");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EstudianteIdEstudiante")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("FechaDesde")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("FechaHasta")
                        .HasColumnType("date");

                    b.Property<DateOnly>("FechaInscripcion")
                        .HasColumnType("date");

                    b.Property<int>("IdCursoGestion")
                        .HasColumnType("integer");

                    b.Property<int>("IdEstudiante")
                        .HasColumnType("integer");

                    b.HasKey("IdGestionEstudiante");

                    b.HasIndex("CursoGestionIdCursoGestion");

                    b.HasIndex("EstudianteIdEstudiante");

                    b.ToTable("GestionesEstudiantes");
                });

            modelBuilder.Entity("LiceoTarijaBackend.Domain.Entities.GestionProfesor", b =>
                {
                    b.Property<int>("IdGestionProfesor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdGestionProfesor"));

                    b.Property<int>("CursoGestionIdCursoGestion")
                        .HasColumnType("integer");

                    b.Property<bool?>("EsTutor")
                        .HasColumnType("boolean");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("FechaDesde")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("FechaHasta")
                        .HasColumnType("date");

                    b.Property<int>("IdCursoGestion")
                        .HasColumnType("integer");

                    b.Property<int>("IdProfesor")
                        .HasColumnType("integer");

                    b.Property<int>("ProfesorIdProfesor")
                        .HasColumnType("integer");

                    b.HasKey("IdGestionProfesor");

                    b.HasIndex("CursoGestionIdCursoGestion");

                    b.HasIndex("ProfesorIdProfesor");

                    b.ToTable("GestionesProfesores");
                });

            modelBuilder.Entity("LiceoTarijaBackend.Domain.Entities.Nota", b =>
                {
                    b.Property<int>("IdNota")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdNota"));

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EvaluacionIdEvaluacion")
                        .HasColumnType("integer");

                    b.Property<int>("GestionEstudianteIdGestionEstudiante")
                        .HasColumnType("integer");

                    b.Property<int>("IdEvaluacion")
                        .HasColumnType("integer");

                    b.Property<int>("IdGestionEstudiante")
                        .HasColumnType("integer");

                    b.Property<decimal>("Valor")
                        .HasColumnType("numeric");

                    b.HasKey("IdNota");

                    b.HasIndex("EvaluacionIdEvaluacion");

                    b.HasIndex("GestionEstudianteIdGestionEstudiante");

                    b.ToTable("Notas");
                });

            modelBuilder.Entity("LiceoTarijaBackend.Domain.Entities.Observacion", b =>
                {
                    b.Property<int>("IdObservacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdObservacion"));

                    b.Property<int>("AreaIdArea")
                        .HasColumnType("integer");

                    b.Property<int?>("CreadoPorUsuarioId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("Fecha")
                        .HasColumnType("date");

                    b.Property<int>("GestionEstudianteIdGestionEstudiante")
                        .HasColumnType("integer");

                    b.Property<int>("IdArea")
                        .HasColumnType("integer");

                    b.Property<int>("IdGestionEstudiante")
                        .HasColumnType("integer");

                    b.Property<int>("IdProfesor")
                        .HasColumnType("integer");

                    b.Property<int>("ProfesorIdProfesor")
                        .HasColumnType("integer");

                    b.HasKey("IdObservacion");

                    b.HasIndex("AreaIdArea");

                    b.HasIndex("CreadoPorUsuarioId");

                    b.HasIndex("GestionEstudianteIdGestionEstudiante");

                    b.HasIndex("ProfesorIdProfesor");

                    b.ToTable("Observaciones");
                });

            modelBuilder.Entity("LiceoTarijaBackend.Domain.Entities.Periodo", b =>
                {
                    b.Property<int>("IdPeriodo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdPeriodo"));

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly?>("FechaFin")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("FechaInicio")
                        .HasColumnType("date");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Orden")
                        .HasColumnType("integer");

                    b.HasKey("IdPeriodo");

                    b.ToTable("Periodos");
                });

            modelBuilder.Entity("LiceoTarijaBackend.Domain.Entities.Persona", b =>
                {
                    b.Property<int>("IdPersona")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdPersona"));

                    b.Property<string>("ApellidoMaterno")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ApellidoPaterno")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Cedula")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Celular")
                        .HasColumnType("text");

                    b.Property<string>("FotoUrl")
                        .HasColumnType("text");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdPersona");

                    b.ToTable("Personas");
                });

            modelBuilder.Entity("LiceoTarijaBackend.Domain.Entities.Personal", b =>
                {
                    b.Property<int>("IdPersonal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdPersonal"));

                    b.Property<string>("Cargo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("IdPersona")
                        .HasColumnType("integer");

                    b.Property<int>("PersonaIdPersona")
                        .HasColumnType("integer");

                    b.HasKey("IdPersonal");

                    b.HasIndex("PersonaIdPersona");

                    b.ToTable("Personal");
                });

            modelBuilder.Entity("LiceoTarijaBackend.Domain.Entities.Profesor", b =>
                {
                    b.Property<int>("IdProfesor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdProfesor"));

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("IdPersona")
                        .HasColumnType("integer");

                    b.Property<int>("PersonaIdPersona")
                        .HasColumnType("integer");

                    b.Property<int>("Rda")
                        .HasColumnType("integer");

                    b.HasKey("IdProfesor");

                    b.HasIndex("PersonaIdPersona");

                    b.ToTable("Profesores");
                });

            modelBuilder.Entity("LiceoTarijaBackend.Domain.Entities.UnidadEducativa", b =>
                {
                    b.Property<int>("IdUnidad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdUnidad"));

                    b.Property<string>("Codigo")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DomicilioId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Sigla")
                        .HasColumnType("text");

                    b.Property<string>("SitioWeb")
                        .HasColumnType("text");

                    b.Property<string>("Telefono1")
                        .HasColumnType("text");

                    b.Property<string>("Telefono2")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("IdUnidad");

                    b.HasIndex("DomicilioId");

                    b.ToTable("UnidadesEducativas");
                });

            modelBuilder.Entity("LiceoTarijaBackend.Domain.Entities.Usuario", b =>
                {
                    b.Property<int>("IdUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdUsuario"));

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("IdPersona")
                        .HasColumnType("integer");

                    b.Property<string>("NombreUsuario")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PersonaIdPersona")
                        .HasColumnType("integer");

                    b.HasKey("IdUsuario");

                    b.HasIndex("PersonaIdPersona");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("LiceoTarijaBackend.Domain.Entities.UsuarioRol", b =>
                {
                    b.Property<int>("IdUsuario")
                        .HasColumnType("integer");

                    b.Property<string>("Rol")
                        .HasColumnType("text");

                    b.Property<DateOnly>("FechaDesde")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("FechaHasta")
                        .HasColumnType("date");

                    b.Property<int>("UsuarioIdUsuario")
                        .HasColumnType("integer");

                    b.HasKey("IdUsuario", "Rol", "FechaDesde");

                    b.HasIndex("UsuarioIdUsuario");

                    b.ToTable("UsuariosRoles");
                });

            modelBuilder.Entity("LiceoTarijaBackend.Domain.Entities.Apoderado", b =>
                {
                    b.HasOne("LiceoTarijaBackend.Domain.Entities.Domicilio", "Domicilio")
                        .WithMany("Apoderados")
                        .HasForeignKey("DomicilioIdDomicilio")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LiceoTarijaBackend.Domain.Entities.Persona", "Persona")
                        .WithMany()
                        .HasForeignKey("PersonaIdPersona")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Domicilio");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("LiceoTarijaBackend.Domain.Entities.ApoderadoEstudiante", b =>
                {
                    b.HasOne("LiceoTarijaBackend.Domain.Entities.Apoderado", "Apoderado")
                        .WithMany("Estudiantes")
                        .HasForeignKey("ApoderadoIdApoderado")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LiceoTarijaBackend.Domain.Entities.Estudiante", "Estudiante")
                        .WithMany("Apoderados")
                        .HasForeignKey("EstudianteIdEstudiante")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Apoderado");

                    b.Navigation("Estudiante");
                });

            modelBuilder.Entity("LiceoTarijaBackend.Domain.Entities.AsignacionHoraria", b =>
                {
                    b.HasOne("LiceoTarijaBackend.Domain.Entities.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaIdArea")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LiceoTarijaBackend.Domain.Entities.BloqueHorario", "Bloque")
                        .WithMany("Asignaciones")
                        .HasForeignKey("BloqueIdBloque")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LiceoTarijaBackend.Domain.Entities.CursoGestion", "CursoGestion")
                        .WithMany("Asignaciones")
                        .HasForeignKey("CursoGestionIdCursoGestion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LiceoTarijaBackend.Domain.Entities.Profesor", "Profesor")
                        .WithMany()
                        .HasForeignKey("ProfesorIdProfesor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Bloque");

                    b.Navigation("CursoGestion");

                    b.Navigation("Profesor");
                });

            modelBuilder.Entity("LiceoTarijaBackend.Domain.Entities.Asistencia", b =>
                {
                    b.HasOne("LiceoTarijaBackend.Domain.Entities.GestionEstudiante", "GestionEstudiante")
                        .WithMany("Asistencias")
                        .HasForeignKey("GestionEstudianteIdGestionEstudiante")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GestionEstudiante");
                });

            modelBuilder.Entity("LiceoTarijaBackend.Domain.Entities.BloqueHorario", b =>
                {
                    b.HasOne("LiceoTarijaBackend.Domain.Entities.Gestion", "Gestion")
                        .WithMany("Bloques")
                        .HasForeignKey("GestionIdGestion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gestion");
                });

            modelBuilder.Entity("LiceoTarijaBackend.Domain.Entities.CalificacionesExcepcion", b =>
                {
                    b.HasOne("LiceoTarijaBackend.Domain.Entities.Usuario", "Usuario")
                        .WithMany("CalificacionesExcepciones")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LiceoTarijaBackend.Domain.Entities.CalificacionesVentana", "Ventana")
                        .WithMany("Excepciones")
                        .HasForeignKey("VentanaIdVentana")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");

                    b.Navigation("Ventana");
                });

            modelBuilder.Entity("LiceoTarijaBackend.Domain.Entities.CalificacionesVentana", b =>
                {
                    b.HasOne("LiceoTarijaBackend.Domain.Entities.Usuario", "AbiertoPor")
                        .WithMany("CalificacionesVentanasAbiertas")
                        .HasForeignKey("AbiertoPorUsuarioId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("LiceoTarijaBackend.Domain.Entities.Usuario", "CerradoPor")
                        .WithMany("CalificacionesVentanasCerradas")
                        .HasForeignKey("CerradoPorUsuarioId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("LiceoTarijaBackend.Domain.Entities.Gestion", "Gestion")
                        .WithMany("CalificacionesVentanas")
                        .HasForeignKey("GestionIdGestion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LiceoTarijaBackend.Domain.Entities.Periodo", "Periodo")
                        .WithMany("CalificacionesVentanas")
                        .HasForeignKey("PeriodoIdPeriodo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AbiertoPor");

                    b.Navigation("CerradoPor");

                    b.Navigation("Gestion");

                    b.Navigation("Periodo");
                });

            modelBuilder.Entity("LiceoTarijaBackend.Domain.Entities.CursoArea", b =>
                {
                    b.HasOne("LiceoTarijaBackend.Domain.Entities.Area", "Area")
                        .WithMany("CursosAreas")
                        .HasForeignKey("AreaIdArea")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LiceoTarijaBackend.Domain.Entities.CursoGestion", "CursoGestion")
                        .WithMany("CursosAreas")
                        .HasForeignKey("CursoGestionIdCursoGestion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("CursoGestion");
                });

            modelBuilder.Entity("LiceoTarijaBackend.Domain.Entities.CursoAreaProfesor", b =>
                {
                    b.HasOne("LiceoTarijaBackend.Domain.Entities.Area", "Area")
                        .WithMany("CursosAreasProfesores")
                        .HasForeignKey("AreaIdArea")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LiceoTarijaBackend.Domain.Entities.CursoGestion", "CursoGestion")
                        .WithMany("CursosAreasProfesores")
                        .HasForeignKey("CursoGestionIdCursoGestion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LiceoTarijaBackend.Domain.Entities.Profesor", "Profesor")
                        .WithMany("CursosAreas")
                        .HasForeignKey("ProfesorIdProfesor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("CursoGestion");

                    b.Navigation("Profesor");
                });

            modelBuilder.Entity("LiceoTarijaBackend.Domain.Entities.CursoGestion", b =>
                {
                    b.HasOne("LiceoTarijaBackend.Domain.Entities.Curso", "Curso")
                        .WithMany("Gestiones")
                        .HasForeignKey("CursoIdCurso")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LiceoTarijaBackend.Domain.Entities.Gestion", "Gestion")
                        .WithMany("Cursos")
                        .HasForeignKey("GestionIdGestion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Curso");

                    b.Navigation("Gestion");
                });

            modelBuilder.Entity("LiceoTarijaBackend.Domain.Entities.Estudiante", b =>
                {
                    b.HasOne("LiceoTarijaBackend.Domain.Entities.Persona", "Persona")
                        .WithMany("Estudiantes")
                        .HasForeignKey("PersonaIdPersona")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("LiceoTarijaBackend.Domain.Entities.Evaluacion", b =>
                {
                    b.HasOne("LiceoTarijaBackend.Domain.Entities.Area", "Area")
                        .WithMany("Evaluaciones")
                        .HasForeignKey("AreaIdArea")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LiceoTarijaBackend.Domain.Entities.Usuario", "CreadoPor")
                        .WithMany("EvaluacionesCreadas")
                        .HasForeignKey("CreadoPorUsuarioId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("LiceoTarijaBackend.Domain.Entities.CursoGestion", "CursoGestion")
                        .WithMany("Evaluaciones")
                        .HasForeignKey("CursoGestionIdCursoGestion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LiceoTarijaBackend.Domain.Entities.Dimension", "Dimension")
                        .WithMany("Evaluaciones")
                        .HasForeignKey("DimensionIdDimension")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LiceoTarijaBackend.Domain.Entities.Periodo", "Periodo")
                        .WithMany("Evaluaciones")
                        .HasForeignKey("PeriodoIdPeriodo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LiceoTarijaBackend.Domain.Entities.Profesor", "Profesor")
                        .WithMany("Evaluaciones")
                        .HasForeignKey("ProfesorIdProfesor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("CreadoPor");

                    b.Navigation("CursoGestion");

                    b.Navigation("Dimension");

                    b.Navigation("Periodo");

                    b.Navigation("Profesor");
                });

            modelBuilder.Entity("LiceoTarijaBackend.Domain.Entities.GestionEstudiante", b =>
                {
                    b.HasOne("LiceoTarijaBackend.Domain.Entities.CursoGestion", "CursoGestion")
                        .WithMany("Estudiantes")
                        .HasForeignKey("CursoGestionIdCursoGestion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LiceoTarijaBackend.Domain.Entities.Estudiante", "Estudiante")
                        .WithMany("Gestiones")
                        .HasForeignKey("EstudianteIdEstudiante")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CursoGestion");

                    b.Navigation("Estudiante");
                });

            modelBuilder.Entity("LiceoTarijaBackend.Domain.Entities.GestionProfesor", b =>
                {
                    b.HasOne("LiceoTarijaBackend.Domain.Entities.CursoGestion", "CursoGestion")
                        .WithMany("Profesores")
                        .HasForeignKey("CursoGestionIdCursoGestion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LiceoTarijaBackend.Domain.Entities.Profesor", "Profesor")
                        .WithMany("Gestiones")
                        .HasForeignKey("ProfesorIdProfesor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CursoGestion");

                    b.Navigation("Profesor");
                });

            modelBuilder.Entity("LiceoTarijaBackend.Domain.Entities.Nota", b =>
                {
                    b.HasOne("LiceoTarijaBackend.Domain.Entities.Evaluacion", "Evaluacion")
                        .WithMany("Notas")
                        .HasForeignKey("EvaluacionIdEvaluacion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LiceoTarijaBackend.Domain.Entities.GestionEstudiante", "GestionEstudiante")
                        .WithMany("Notas")
                        .HasForeignKey("GestionEstudianteIdGestionEstudiante")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evaluacion");

                    b.Navigation("GestionEstudiante");
                });

            modelBuilder.Entity("LiceoTarijaBackend.Domain.Entities.Observacion", b =>
                {
                    b.HasOne("LiceoTarijaBackend.Domain.Entities.Area", "Area")
                        .WithMany("Observaciones")
                        .HasForeignKey("AreaIdArea")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LiceoTarijaBackend.Domain.Entities.Usuario", "CreadoPor")
                        .WithMany("ObservacionesCreadas")
                        .HasForeignKey("CreadoPorUsuarioId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("LiceoTarijaBackend.Domain.Entities.GestionEstudiante", "GestionEstudiante")
                        .WithMany("Observaciones")
                        .HasForeignKey("GestionEstudianteIdGestionEstudiante")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LiceoTarijaBackend.Domain.Entities.Profesor", "Profesor")
                        .WithMany("Observaciones")
                        .HasForeignKey("ProfesorIdProfesor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("CreadoPor");

                    b.Navigation("GestionEstudiante");

                    b.Navigation("Profesor");
                });

            modelBuilder.Entity("LiceoTarijaBackend.Domain.Entities.Personal", b =>
                {
                    b.HasOne("LiceoTarijaBackend.Domain.Entities.Persona", "Persona")
                        .WithMany("Personal")
                        .HasForeignKey("PersonaIdPersona")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("LiceoTarijaBackend.Domain.Entities.Profesor", b =>
                {
                    b.HasOne("LiceoTarijaBackend.Domain.Entities.Persona", "Persona")
                        .WithMany("Profesores")
                        .HasForeignKey("PersonaIdPersona")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("LiceoTarijaBackend.Domain.Entities.UnidadEducativa", b =>
                {
                    b.HasOne("LiceoTarijaBackend.Domain.Entities.Domicilio", "Domicilio")
                        .WithMany("UnidadesEducativas")
                        .HasForeignKey("DomicilioId");

                    b.Navigation("Domicilio");
                });

            modelBuilder.Entity("LiceoTarijaBackend.Domain.Entities.Usuario", b =>
                {
                    b.HasOne("LiceoTarijaBackend.Domain.Entities.Persona", "Persona")
                        .WithMany("Usuarios")
                        .HasForeignKey("PersonaIdPersona")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("LiceoTarijaBackend.Domain.Entities.UsuarioRol", b =>
                {
                    b.HasOne("LiceoTarijaBackend.Domain.Entities.Usuario", "Usuario")
                        .WithMany("Roles")
                        .HasForeignKey("UsuarioIdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("LiceoTarijaBackend.Domain.Entities.Apoderado", b =>
                {
                    b.Navigation("Estudiantes");
                });

            modelBuilder.Entity("LiceoTarijaBackend.Domain.Entities.Area", b =>
                {
                    b.Navigation("CursosAreas");

                    b.Navigation("CursosAreasProfesores");

                    b.Navigation("Evaluaciones");

                    b.Navigation("Observaciones");
                });

            modelBuilder.Entity("LiceoTarijaBackend.Domain.Entities.BloqueHorario", b =>
                {
                    b.Navigation("Asignaciones");
                });

            modelBuilder.Entity("LiceoTarijaBackend.Domain.Entities.CalificacionesVentana", b =>
                {
                    b.Navigation("Excepciones");
                });

            modelBuilder.Entity("LiceoTarijaBackend.Domain.Entities.Curso", b =>
                {
                    b.Navigation("Gestiones");
                });

            modelBuilder.Entity("LiceoTarijaBackend.Domain.Entities.CursoGestion", b =>
                {
                    b.Navigation("Asignaciones");

                    b.Navigation("CursosAreas");

                    b.Navigation("CursosAreasProfesores");

                    b.Navigation("Estudiantes");

                    b.Navigation("Evaluaciones");

                    b.Navigation("Profesores");
                });

            modelBuilder.Entity("LiceoTarijaBackend.Domain.Entities.Dimension", b =>
                {
                    b.Navigation("Evaluaciones");
                });

            modelBuilder.Entity("LiceoTarijaBackend.Domain.Entities.Domicilio", b =>
                {
                    b.Navigation("Apoderados");

                    b.Navigation("UnidadesEducativas");
                });

            modelBuilder.Entity("LiceoTarijaBackend.Domain.Entities.Estudiante", b =>
                {
                    b.Navigation("Apoderados");

                    b.Navigation("Gestiones");
                });

            modelBuilder.Entity("LiceoTarijaBackend.Domain.Entities.Evaluacion", b =>
                {
                    b.Navigation("Notas");
                });

            modelBuilder.Entity("LiceoTarijaBackend.Domain.Entities.Gestion", b =>
                {
                    b.Navigation("Bloques");

                    b.Navigation("CalificacionesVentanas");

                    b.Navigation("Cursos");
                });

            modelBuilder.Entity("LiceoTarijaBackend.Domain.Entities.GestionEstudiante", b =>
                {
                    b.Navigation("Asistencias");

                    b.Navigation("Notas");

                    b.Navigation("Observaciones");
                });

            modelBuilder.Entity("LiceoTarijaBackend.Domain.Entities.Periodo", b =>
                {
                    b.Navigation("CalificacionesVentanas");

                    b.Navigation("Evaluaciones");
                });

            modelBuilder.Entity("LiceoTarijaBackend.Domain.Entities.Persona", b =>
                {
                    b.Navigation("Estudiantes");

                    b.Navigation("Personal");

                    b.Navigation("Profesores");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("LiceoTarijaBackend.Domain.Entities.Profesor", b =>
                {
                    b.Navigation("CursosAreas");

                    b.Navigation("Evaluaciones");

                    b.Navigation("Gestiones");

                    b.Navigation("Observaciones");
                });

            modelBuilder.Entity("LiceoTarijaBackend.Domain.Entities.Usuario", b =>
                {
                    b.Navigation("CalificacionesExcepciones");

                    b.Navigation("CalificacionesVentanasAbiertas");

                    b.Navigation("CalificacionesVentanasCerradas");

                    b.Navigation("EvaluacionesCreadas");

                    b.Navigation("ObservacionesCreadas");

                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}

